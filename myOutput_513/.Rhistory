myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=45)
### Trunnorm starts to fail. Switch to outference.
ptruncnorm(2, a=1.98, b=2.02, mean=0)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=0)
ptruncnorm(2, a=1.98, b=2.02, mean=-1)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-1)
ptruncnorm(2, a=1.98, b=2.02, mean=-2)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-2)
ptruncnorm(2, a=1.98, b=2.02, mean=-3)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-3)
ptruncnorm(2, a=1.98, b=2.02, mean=-6)
### The "truncnorm" package fails after this point because it is trying to compute 0/0. Need to switch to relying on my function.
ptruncnorm(2, a=1.98, b=2.02, mean=-7)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-10)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-20)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-35)
### Uh oh. My code breaks too.
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-39)
ptruncnorm(2, a=1.98, b=2.02, mean=0)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=0)
ptruncnorm(2, a=1.98, b=2.02, mean=-1)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-1)
ptruncnorm(2, a=1.98, b=2.02, mean=-2)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-2)
ptruncnorm(2, a=1.98, b=2.02, mean=-3)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-3)
ptruncnorm(2, a=1.98, b=2.02, mean=-6)
### The "truncnorm" package fails after this point because it is trying to compute 0/0. Need to switch to relying on my function.
ptruncnorm(2, a=1.98, b=2.02, mean=-7)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-10)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-20)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-35)
### Uh oh. My code breaks too.
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-40)
ptruncnorm(2, a=1.98, b=2.02, mean=0)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=0)
ptruncnorm(2, a=1.98, b=2.02, mean=-1)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-1)
ptruncnorm(2, a=1.98, b=2.02, mean=-2)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-2)
ptruncnorm(2, a=1.98, b=2.02, mean=-3)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-3)
ptruncnorm(2, a=1.98, b=2.02, mean=-6)
### The "truncnorm" package fails after this point because it is trying to compute 0/0. Need to switch to relying on my function.
ptruncnorm(2, a=1.98, b=2.02, mean=-7)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-10)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-20)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-35)
### Uh oh. My code breaks too.
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-50)
ptruncnorm(2, a=1.98, b=2.02, mean=0)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=0)
ptruncnorm(2, a=1.98, b=2.02, mean=-1)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-1)
ptruncnorm(2, a=1.98, b=2.02, mean=-2)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-2)
ptruncnorm(2, a=1.98, b=2.02, mean=-3)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-3)
ptruncnorm(2, a=1.98, b=2.02, mean=-6)
### The "truncnorm" package fails after this point because it is trying to compute 0/0. Need to switch to relying on my function.
ptruncnorm(2, a=1.98, b=2.02, mean=-7)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-10)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-20)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-35)
### Uh oh. My code breaks too.
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-50)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-90)
ptruncnorm(2, a=1.98, b=2.02, mean=0)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=0)
ptruncnorm(2, a=1.98, b=2.02, mean=-1)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-1)
ptruncnorm(2, a=1.98, b=2.02, mean=-2)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-2)
ptruncnorm(2, a=1.98, b=2.02, mean=-3)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-3)
ptruncnorm(2, a=1.98, b=2.02, mean=-6)
### The "truncnorm" package fails after this point because it is trying to compute 0/0. Need to switch to relying on my function.
ptruncnorm(2, a=1.98, b=2.02, mean=-7)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-10)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-20)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-35)
### Uh oh. My code breaks too.
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-50)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-90)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-100)
ptruncnorm(2, a=1.98, b=2.02, mean=0)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=0)
ptruncnorm(2, a=1.98, b=2.02, mean=-1)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-1)
ptruncnorm(2, a=1.98, b=2.02, mean=-2)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-2)
ptruncnorm(2, a=1.98, b=2.02, mean=-3)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-3)
ptruncnorm(2, a=1.98, b=2.02, mean=-6)
### The "truncnorm" package fails after this point because it is trying to compute 0/0. Need to switch to relying on my function.
ptruncnorm(2, a=1.98, b=2.02, mean=-7)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-10)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-20)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-35)
### Uh oh. My code breaks too.
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-50)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-90)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-110)
ptruncnorm(2, a=1.98, b=2.02, mean=0)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=0)
ptruncnorm(2, a=1.98, b=2.02, mean=-1)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-1)
ptruncnorm(2, a=1.98, b=2.02, mean=-2)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-2)
ptruncnorm(2, a=1.98, b=2.02, mean=-3)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-3)
ptruncnorm(2, a=1.98, b=2.02, mean=-6)
### The "truncnorm" package fails after this point because it is trying to compute 0/0. Need to switch to relying on my function.
ptruncnorm(2, a=1.98, b=2.02, mean=-7)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-10)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-20)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-35)
### Uh oh. My code breaks too.
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-50)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-90)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-100)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-110)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-150)
ptruncnorm(2, a=1.98, b=2.02, mean=0)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=0)
ptruncnorm(2, a=1.98, b=2.02, mean=-1)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-1)
ptruncnorm(2, a=1.98, b=2.02, mean=-2)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-2)
ptruncnorm(2, a=1.98, b=2.02, mean=-3)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-3)
ptruncnorm(2, a=1.98, b=2.02, mean=-6)
### The "truncnorm" package fails after this point because it is trying to compute 0/0. Need to switch to relying on my function.
ptruncnorm(2, a=1.98, b=2.02, mean=-7)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-10)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-20)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-35)
### Uh oh. My code breaks too.
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-50)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-90)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-100)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-110)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-150)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-180)
ptruncnorm(2, a=1.98, b=2.02, mean=0)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=0)
ptruncnorm(2, a=1.98, b=2.02, mean=-1)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-1)
ptruncnorm(2, a=1.98, b=2.02, mean=-2)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-2)
ptruncnorm(2, a=1.98, b=2.02, mean=-3)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-3)
ptruncnorm(2, a=1.98, b=2.02, mean=5)
ptruncnorm(2, a=1.98, b=2.02, mean=6)
ptruncnorm(2, a=1.98, b=2.02, mean=8)
ptruncnorm(2, a=1.98, b=2.02, mean=12)
ptruncnorm(2, a=1.98, b=2.02, mean=15)
ptruncnorm(2, a=1.98, b=2.02, mean=30)
ptruncnorm(2, a=1.98, b=2.02, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=45)
### Trunnorm starts to fail. Switch to outference.
ptruncnorm(2, a=1.98, b=2.02, mean=5)
ptruncnorm(2, a=1.98, b=2.02, mean=6)
ptruncnorm(2, a=1.98, b=2.02, mean=8)
ptruncnorm(2, a=1.98, b=2.02, mean=12)
ptruncnorm(2, a=1.98, b=2.02, mean=15)
ptruncnorm(2, a=1.98, b=2.02, mean=30)
ptruncnorm(2, a=1.98, b=2.02, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=50)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=70)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=90)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=110)
### Trunnorm starts to fail. Switch to outference.
ptruncnorm(2, a=1.98, b=2.02, mean=5)
ptruncnorm(2, a=1.98, b=2.02, mean=6)
ptruncnorm(2, a=1.98, b=2.02, mean=8)
ptruncnorm(2, a=1.98, b=2.02, mean=12)
ptruncnorm(2, a=1.98, b=2.02, mean=15)
ptruncnorm(2, a=1.98, b=2.02, mean=30)
ptruncnorm(2, a=1.98, b=2.02, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=50)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=70)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=90)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=110)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=150)
### Trunnorm starts to fail. Switch to outference.
ptruncnorm(2, a=1.98, b=2.02, mean=5)
ptruncnorm(2, a=1.98, b=2.02, mean=6)
ptruncnorm(2, a=1.98, b=2.02, mean=8)
ptruncnorm(2, a=1.98, b=2.02, mean=12)
ptruncnorm(2, a=1.98, b=2.02, mean=15)
ptruncnorm(2, a=1.98, b=2.02, mean=30)
ptruncnorm(2, a=1.98, b=2.02, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=50)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=70)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=90)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=110)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=150)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=180)
### Trunnorm starts to fail. Switch to outference.
ptruncnorm(2, a=1.98, b=2.02, mean=5)
ptruncnorm(2, a=1.98, b=2.02, mean=6)
ptruncnorm(2, a=1.98, b=2.02, mean=8)
ptruncnorm(2, a=1.98, b=2.02, mean=12)
ptruncnorm(2, a=1.98, b=2.02, mean=15)
ptruncnorm(2, a=1.98, b=2.02, mean=30)
ptruncnorm(2, a=1.98, b=2.02, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=50)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=70)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=90)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=110)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=150)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=190)
### Trunnorm starts to fail. Switch to outference.
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-10)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-20)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-90)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-100)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-110)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-150)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-180)
setwd("~/Downloads")
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
source('~/Downloads/SLAIR Model test.R')
?rbinom
rbinom(10000, size=60, p=0.45)
dbinom(30, size=60, p=0.45)
dbinom(29, size=60, p=0.45)
dbinom(28, size=60, p=0.45)
dbinom(27, size=60, p=0.45)
dbinom(60, size=60, p=0.45)
dbinom(1, size=60, p=0.45)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
source("https://anna-neufeld.github.io/Stat311/oiLabs/Week10/plot_ss.R")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
source("https://anna-neufeld.github.io/Stat311/oiLabs/Week10/plot_ss.R")
mlb <- read.csv("https://anna-neufeld.github.io/Stat311/oiLabs/Week10/mlb11.csv")
glimpse(mlb)
ggplot(data=mlb, aes(x=runs, y=at_bats)) + geom_point()
plot(1:20, jitter(1:20,5))
plot(1:20, jitter(1:20,5)^2)
plot(1:40, jitter(1:40,5)^2)
plot(1:40, jitter(1:50,5)^2)
plot(1:50, jitter(1:50,5)^2)
plot(-50:50, jitter(-50:50,5)^2)
ggplot(data=mlb, aes(x=at_bats, y=runs)) + geom_point()
ggplot(data=mlb, aes(x=at_bats, y=runs)) + geom_point()
plot(-50:50, jitter(-50:50,5)^2)
plot(1:50, jitter(1:50,5))
plot(1:50, jitter(1:50,100))
plot(1:50, jitter(1:50,50))
plot(1:50, jitter(1:50,1))
plot(1:50, -jitter(1:50,1))
points(40,0)
plot(1:50, -jitter(1:50,1))
plot(1:50, jitter(1:50,1))
plot(rnorm(50), rnorm(50))
mlb %>% summarize(cor(runs, homeruns))
plot_ss(x = at_bats, y = runs, data = mlb)
plot_ss(x = at_bats, y = runs, data = mlb)
plot_ss(x = at_bats, y = runs, data = mlb)
plot_ss(x = at_bats, y = runs, data = mlb)
plot_ss(x = at_bats, y = runs, data = mlb)
model <- lm(runs ~ at_bats, data = mlb)
model\
model
summary(model)
ggplot(mlb, aes(x = at_bats, y = runs))+ geom_point() +
stat_smooth(method = "lm", se = FALSE)
model <- lm(runs ~ at_bats, data = mlb)
model$coefficients
model <- lm(runs ~ at_bats, data = mlb)
prediction = model$coefficients[1] + model$coefficients[2]*5421
prediction
View(mlb)
truth <- mlb %>% filter(team=="Seattle Mariners") %>% select(runs)
truth
truth <- mlb %>% filter(team=="Seattle Mariners") %>% select(runs)
truth-prediction
model2 <- lm(runs~homeruns, data=mlb)
summary(model2)
summary(model2)$r.squared
summary(lm(runs~stolen_bases, data=mlb))$r.squared
summary(lm(runs~new_obs, data=mlb))$r.squared
summary(lm(runs~new_slug, data=mlb))$r.squared
summary(lm(runs~new_homeruns, data=mlb))$r.squared
summary(lm(runs~new_home_runs, data=mlb))$r.squared
summary(lm(runs~homeruns, data=mlb))$r.squared
ggplot(mlb, aes(x = new_obs, y = runs))+ geom_point() +
stat_smooth(method = "lm", se = FALSE)
summary(lm(runs~new_obs, data=mlb))
ggplot(mlb, aes(x = new_obs, y = runs))+ geom_point() +
stat_smooth(method = "lm", se = FALSE, col="red")
ggplot(mlb, aes(x = new_obs, y = runs))+ geom_point() +
stat_smooth(method = "lm", col="red")
summary(lm(runs~strikeouts, data=mlb))
cor(mlb$strikeouts, mlb$runs)
cor(mlb$strikeouts, mlb$wins)
cor(mlb$wins, mlb$runs)
lm(runs~strikeouts)
lm(runs~strikeouts, data=mlb)
mlb %>% summarize(lm(runs~strikeouts))
mlb %>% summarize(lm(runs~strikeouts)$coefficients)
summary(lm(runs~strikeouts) data=mlb)
summary(lm(runs~strikeouts),data=mlb)
glimpse(mlb)
setwd('~/Stat572/myOutput_513/')
library(tidyverse)
library(reshape2)
library(gridExtra)
### This stores the true N and then the actual alpha-observable Nalphas
### which change based on the data generating mechanism
N <- 500
alpha = c(0, 0.005,0.010, 0.050, 0.100)
props <- matrix(0, nrow=5, ncol=5)
#### NEED TO DERIVE AND REPRODUCE THESE.
props[1,] <- c(1,1,1,1,1) ### BECAUSE OF THE STRICT GREATER THAN IN THE DEFINITION
props[2,] <- c(1, 1, 1, 0.7, 0.7) ### AGAIN BC OF THE STRICT GREATER THAN THIS MATTERS
props[3,] <- 1 - pbeta(1-(1-alpha)^(1/6), 1/2, 1/2)
props[4,] <- 1 - pbeta(1-(1-alpha)^(1/6), 1, 10)
props[5,] <- 1 - pbeta(1-(1-alpha)^(1/6), 1,1)
realNs <- as.data.frame(props*N)
names(realNs) = c("0", "0.005", "0.01", "0.05", "0.1")
realNs$sim <- 1:5
realNdat <- melt(realNs, id='sim')
#### PLOT 1 BETA
load("sim_beta_1.RData")
resBeta <- as.data.frame(resBeta[,1:5])
names(resBeta) = c("0", "0.005", "0.01", "0.05", "0.1")
resBeta$sim <- 1:NROW(resBeta)
resBeta2 <- melt(resBeta, id='sim')
p1 <- ggplot(resBeta2,aes(x=variable,y=value)) +
geom_violin(draw_quantiles = c(0.025,0.975))+scale_y_continuous(trans="log10")+
geom_point(data=realNdat %>% filter(sim==1), aes(x=variable, y=value), col="red")+
ggtitle("Scenario 1, Beta Inference")+ xlab("")+ylab(expression(N[alpha]))+
theme(text=element_text(size=10),axis.text.x=element_text(angle=90),plot.title = element_text(size = 10))
#### PLOT 1 ATOM
load("sim_atom_1.RData")
resAtom <- as.data.frame(resAtom[,1:5])
names(resAtom) = c("0", "0.005", "0.01", "0.05", "0.1")
resAtom$sim <- 1:NROW(resAtom)
resAtom2 <- melt(resAtom, id='sim')
p2 <- ggplot(resAtom2,aes(x=variable,y=value)) +
geom_violin(draw_quantiles = c(0.025,0.975)) +
geom_point(data=realNdat %>% filter(sim==1), aes(x=variable, y=value), col="red")+
ggtitle("Scenario 1, Atom Inference")+ xlab("")+ylab(expression(N[alpha]))+
theme(text=element_text(size=10),axis.text.x=element_text(angle=90),plot.title = element_text(size = 10))
#### PLOT 2 BETA
load("sim_beta_2.RData")
resBeta <- as.data.frame(resBeta[,1:5])
names(resBeta) = c("0", "0.005", "0.01", "0.05", "0.1")
resBeta$sim <- 1:NROW(resBeta)
resBeta2 <- melt(resBeta, id='sim')
p3 <- ggplot(resBeta2,aes(x=variable,y=value)) +
geom_violin(draw_quantiles = c(0.025,0.975))+scale_y_continuous(trans="log10")+
geom_point(data=realNdat %>% filter(sim==2), aes(x=variable, y=value), col="red")+
ggtitle("Scenario 2, Beta Inference")+ xlab("")+ylab("")+
theme(text=element_text(size=10),axis.text.x=element_text(angle=90),plot.title = element_text(size = 10))
#### PLOT 2 ATOM
load("sim_atom_2.RData")
resAtom <- as.data.frame(resAtom[,1:5])
names(resAtom) = c("0", "0.005", "0.01", "0.05", "0.1")
resAtom$sim <- 1:NROW(resAtom)
resAtom2 <- melt(resAtom, id='sim')
p4 <- ggplot(resAtom2,aes(x=variable,y=value)) +
geom_violin(draw_quantiles = c(0.025,0.975)) +
scale_y_continuous(trans="log10")+
geom_point(data=realNdat %>% filter(sim==2), aes(x=variable, y=value), col="red")+
ggtitle("Scenario 2, Atom Inference")+ xlab("")+ylab("")+
theme(text=element_text(size=10),axis.text.x=element_text(angle=90),plot.title = element_text(size = 10))
#### PLOT 3 BETA
load("sim_beta_3.RData")
resBeta <- as.data.frame(resBeta[,1:5])
names(resBeta) = c("0", "0.005", "0.01", "0.05", "0.1")
resBeta$sim <- 1:NROW(resBeta)
resBeta2 <- melt(resBeta, id='sim')
p5 <- ggplot(resBeta2,aes(x=variable,y=value)) +
geom_violin(draw_quantiles = c(0.025,0.975))+scale_y_continuous(trans="log10")+
geom_point(data=realNdat %>% filter(sim==3), aes(x=variable, y=value), col="red")+
ggtitle("Scenario 3, Beta Inference")+ xlab("")+ylab("")+
theme(text=element_text(size=10),axis.text.x=element_text(angle=90),plot.title = element_text(size = 10))
p52 <- ggplot(resBeta2,aes(x=variable,y=value)) +
geom_violin(draw_quantiles = c(0.025,0.975))+scale_y_continuous(trans="log10")+
geom_point(data=realNdat %>% filter(sim==3), aes(x=variable, y=value), col="red")+
ggtitle("Beta(1/2, 1/2)")+ xlab("")+ylab("")+
theme(text=element_text(size=18),axis.text.x=element_text(angle=90),plot.title = element_text(size = 18))+
xlab(expression(alpha))+ylab(expression(N[alpha]))
#### PLOT 3 ATOM
load("sim_atom_3.RData")
resAtom <- as.data.frame(resAtom[,1:5])
names(resAtom) = c("0", "0.005", "0.01", "0.05", "0.1")
resAtom$sim <- 1:NROW(resAtom)
resAtom2 <- melt(resAtom, id='sim')
p6 <- ggplot(resAtom2,aes(x=variable,y=value)) +
geom_violin(draw_quantiles = c(0.025,0.975)) +
scale_y_continuous(trans="log10")+
geom_point(data=realNdat %>% filter(sim==3), aes(x=variable, y=value), col="red")+
ggtitle("Scenario 3, Atom Inference") + xlab(expression(alpha))+ylab("")+
theme(text=element_text(size=10),axis.text.x=element_text(angle=90),plot.title = element_text(size = 10))
#### PLOT 4 BETA
load("sim_beta_4.RData")
resBeta <- as.data.frame(resBeta[,1:5])
names(resBeta) = c("0", "0.005", "0.01", "0.05", "0.1")
resBeta$sim <- 1:NROW(resBeta)
resBeta2 <- melt(resBeta, id='sim')
p7 <- ggplot(resBeta2,aes(x=variable,y=value)) +
geom_violin(draw_quantiles = c(0.025,0.975))+scale_y_continuous(trans="log10")+
geom_point(data=realNdat %>% filter(sim==4), aes(x=variable, y=value), col="red")+
ggtitle("Scenario 4, Beta Inference")+ xlab("")+ylab("")+
theme(text=element_text(size=10),axis.text.x=element_text(angle=90),plot.title = element_text(size = 10))
p72 <- ggplot(resBeta2,aes(x=variable,y=value)) +
geom_violin(draw_quantiles = c(0.025,0.975))+scale_y_continuous(trans="log10")+
geom_point(data=realNdat %>% filter(sim==4), aes(x=variable, y=value), col="red")+
ggtitle("Beta(1,10)")+ xlab("")+ylab("")+
theme(text=element_text(size=18),axis.text.x=element_text(angle=90),plot.title = element_text(size = 18))+
xlab(expression(alpha))
#### PLOT 5 ATOM
load("sim_atom_4.RData")
resAtom <- as.data.frame(resAtom[,1:5])
names(resAtom) = c("0", "0.005", "0.01", "0.05", "0.1")
resAtom$sim <- 1:NROW(resAtom)
resAtom2 <- melt(resAtom, id='sim')
p8 <- ggplot(resAtom2,aes(x=variable,y=value)) +
geom_violin(draw_quantiles = c(0.025,0.975)) +
geom_point(data=realNdat %>% filter(sim==4), aes(x=variable, y=value), col="red")+
ggtitle("Scenario 4, Atom Inference")+ xlab("")+ylab("")+
theme(text=element_text(size=10),axis.text.x=element_text(angle=90),plot.title = element_text(size = 10))
#### PLOT 5 BETA
load("sim_beta_5.RData")
resBeta <- as.data.frame(resBeta[,1:5])
names(resBeta) = c("0", "0.005", "0.01", "0.05", "0.1")
resBeta$sim <- 1:NROW(resBeta)
resBeta2 <- melt(resBeta, id='sim')
p9 <- ggplot(resBeta2,aes(x=variable,y=value)) +
geom_violin(draw_quantiles = c(0.025,0.975))+scale_y_continuous(trans="log10")+
geom_point(data=realNdat %>% filter(sim==5), aes(x=variable, y=value), col="red")+
ggtitle("Scenario 5, Beta Inference")+ xlab("")+ylab("")+
theme(text=element_text(size=10),axis.text.x=element_text(angle=90),plot.title = element_text(size = 10))
p92 <- ggplot(resBeta2,aes(x=variable,y=value)) +
geom_violin(draw_quantiles = c(0.025,0.975))+scale_y_continuous(trans="log10")+
geom_point(data=realNdat %>% filter(sim==5), aes(x=variable, y=value), col="red")+
ggtitle("Beta(1,1)")+ xlab("")+ylab("")+
theme(text=element_text(size=18),axis.text.x=element_text(angle=90),plot.title = element_text(size = 18))+
xlab(expression(alpha))
#### PLOT 5 ATOM
load("sim_atom_5.RData")
resAtom <- as.data.frame(resAtom[,1:5])
names(resAtom) = c("0", "0.005", "0.01", "0.05", "0.1")
resAtom$sim <- 1:NROW(resAtom)
resAtom2 <- melt(resAtom, id='sim')
p10 <- ggplot(resAtom2,aes(x=variable,y=value)) +
geom_violin(draw_quantiles = c(0.025,0.975)) +
geom_point(data=realNdat %>% filter(sim==5), aes(x=variable, y=value), col="red")+
ggtitle("Scenario 5, Atom Inference")+ xlab("")+ylab("")+
theme(text=element_text(size=10),axis.text.x=element_text(angle=90),
plot.title = element_text(size = 10))
#### MAKE VIOLIN PLOT!!!!!!! FIGURE 4
#png('MYVIOLIN.png',width=800,height=550)
ggsave(file="MYVIOLIN.png", grid.arrange(p1,p3,p5,p7,p9,p2,p4,p6,p8,p10, nrow=2))
png('MYVIOLIN.png',width=880,height=550)
grid.arrange(p1,p3,p5,p7,p9,p2,p4,p6,p8,p10, nrow=2)
dev.off()
