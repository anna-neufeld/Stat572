myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-90)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-110)
ptruncnorm(2, a=1.98, b=2.02, mean=0)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=0)
ptruncnorm(2, a=1.98, b=2.02, mean=-1)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-1)
ptruncnorm(2, a=1.98, b=2.02, mean=-2)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-2)
ptruncnorm(2, a=1.98, b=2.02, mean=-3)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-3)
ptruncnorm(2, a=1.98, b=2.02, mean=-6)
### The "truncnorm" package fails after this point because it is trying to compute 0/0. Need to switch to relying on my function.
ptruncnorm(2, a=1.98, b=2.02, mean=-7)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-10)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-20)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-35)
### Uh oh. My code breaks too.
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-50)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-90)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-100)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-110)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-150)
ptruncnorm(2, a=1.98, b=2.02, mean=0)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=0)
ptruncnorm(2, a=1.98, b=2.02, mean=-1)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-1)
ptruncnorm(2, a=1.98, b=2.02, mean=-2)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-2)
ptruncnorm(2, a=1.98, b=2.02, mean=-3)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-3)
ptruncnorm(2, a=1.98, b=2.02, mean=-6)
### The "truncnorm" package fails after this point because it is trying to compute 0/0. Need to switch to relying on my function.
ptruncnorm(2, a=1.98, b=2.02, mean=-7)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-10)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-20)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-35)
### Uh oh. My code breaks too.
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-50)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-90)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-100)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-110)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-150)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-180)
ptruncnorm(2, a=1.98, b=2.02, mean=0)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=0)
ptruncnorm(2, a=1.98, b=2.02, mean=-1)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-1)
ptruncnorm(2, a=1.98, b=2.02, mean=-2)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-2)
ptruncnorm(2, a=1.98, b=2.02, mean=-3)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-3)
ptruncnorm(2, a=1.98, b=2.02, mean=5)
ptruncnorm(2, a=1.98, b=2.02, mean=6)
ptruncnorm(2, a=1.98, b=2.02, mean=8)
ptruncnorm(2, a=1.98, b=2.02, mean=12)
ptruncnorm(2, a=1.98, b=2.02, mean=15)
ptruncnorm(2, a=1.98, b=2.02, mean=30)
ptruncnorm(2, a=1.98, b=2.02, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=45)
### Trunnorm starts to fail. Switch to outference.
ptruncnorm(2, a=1.98, b=2.02, mean=5)
ptruncnorm(2, a=1.98, b=2.02, mean=6)
ptruncnorm(2, a=1.98, b=2.02, mean=8)
ptruncnorm(2, a=1.98, b=2.02, mean=12)
ptruncnorm(2, a=1.98, b=2.02, mean=15)
ptruncnorm(2, a=1.98, b=2.02, mean=30)
ptruncnorm(2, a=1.98, b=2.02, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=50)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=70)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=90)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=110)
### Trunnorm starts to fail. Switch to outference.
ptruncnorm(2, a=1.98, b=2.02, mean=5)
ptruncnorm(2, a=1.98, b=2.02, mean=6)
ptruncnorm(2, a=1.98, b=2.02, mean=8)
ptruncnorm(2, a=1.98, b=2.02, mean=12)
ptruncnorm(2, a=1.98, b=2.02, mean=15)
ptruncnorm(2, a=1.98, b=2.02, mean=30)
ptruncnorm(2, a=1.98, b=2.02, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=50)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=70)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=90)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=110)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=150)
### Trunnorm starts to fail. Switch to outference.
ptruncnorm(2, a=1.98, b=2.02, mean=5)
ptruncnorm(2, a=1.98, b=2.02, mean=6)
ptruncnorm(2, a=1.98, b=2.02, mean=8)
ptruncnorm(2, a=1.98, b=2.02, mean=12)
ptruncnorm(2, a=1.98, b=2.02, mean=15)
ptruncnorm(2, a=1.98, b=2.02, mean=30)
ptruncnorm(2, a=1.98, b=2.02, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=50)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=70)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=90)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=110)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=150)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=180)
### Trunnorm starts to fail. Switch to outference.
ptruncnorm(2, a=1.98, b=2.02, mean=5)
ptruncnorm(2, a=1.98, b=2.02, mean=6)
ptruncnorm(2, a=1.98, b=2.02, mean=8)
ptruncnorm(2, a=1.98, b=2.02, mean=12)
ptruncnorm(2, a=1.98, b=2.02, mean=15)
ptruncnorm(2, a=1.98, b=2.02, mean=30)
ptruncnorm(2, a=1.98, b=2.02, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=50)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=70)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=90)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=110)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=150)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=190)
### Trunnorm starts to fail. Switch to outference.
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-10)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-20)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-40)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-90)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-100)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-110)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-150)
myTN(Intervals(c(1.98,2.02)), 2, sigma=1, mean=-180)
setwd("~/Regression Tree Inference Things")
res <- read.csv("these_results_NEW_CORRECT.csv", sep=" ", header=FALSE)
names(res) <- c("seed", "depth", "type", "lower", "upper", "pvalue", "truth",
"size1", "size2", "sample_mean", "num_ints", "length", "length_comp", "S_int", "NA")
head(res)
library(tidyverse)
condition <- res %>% filter(type == "condition")
res <- res %>% filter(size1 > 0, size2 > 0, !is.na(lower)) %>% mutate(correct = ((lower < truth & upper > truth) | lower < -truth & upper > -truth))
res %>% filter(size1 > 1, size2 > 1, upper != Inf) %>% group_by(depth, type) %>% summarize(mean(correct), mean(upper-lower))
res %>% filter(size1 > 1, size2 > 1, upper != Inf) %>% group_by(depth, type) %>% summarize(mean(correct), mean(upper-lower))
setwd("~/Regression Tree Inference Things")
res <- read.csv("these_results_NEW_CORRECT.csv", sep=" ", header=FALSE)
head(res)
table(res$depth)
unique(res$depth)
setwd("~/Regression Tree Inference Things")
res <- read.csv("these_results_NEW_CORRECT.csv", sep=" ", header=FALSE)
names(res) <- c("seed", "depth", "type", "lower", "upper", "pvalue", "truth",
"size1", "size2", "sample_mean", "num_ints", "length", "length_comp", "S_int", "NA")
unique(res$depth)
setwd("~/Regression Tree Inference Things")
res <- read.csv("these_results_NEW_CORRECT.csv", sep=" ", header=FALSE)
names(res) <- c("seed", "depth", "type", "lower", "upper", "pvalue", "truth",
"size1", "size2", "sample_mean", "num_ints", "length", "length_comp", "S_int", "NA")
head(res)
unique(res$depth)
setwd("~/Regression Tree Inference Things")
res <- read.csv("these_results_NEW_CORRECT.csv", sep=" ", header=FALSE)
names(res) <- c("seed", "depth", "type", "lower", "upper", "pvalue", "truth",
"size1", "size2", "sample_mean", "num_ints", "length", "length_comp", "S_int", "NA")
head(res)
library(tidyverse)
condition <- res %>% filter(type == "condition")
res <- res %>% filter(size1 > 0, size2 > 0, !is.na(lower)) %>% mutate(correct = ((lower < truth & upper > truth) | lower < -truth & upper > -truth))
res %>% filter(size1 > 1, size2 > 1, upper != Inf) %>% group_by(depth, type) %>% summarize(mean(correct), mean(upper-lower))
p23 <- ggplot(data = condition %>% filter(depth==2), aes(x = length, y=-log10(pvalue))) + geom_smooth() + ggtitle("Length of S vs. Pvalue")
p33 <- ggplot(data = condition %>% filter(depth==2), aes(x = length, y=log10(upper-lower))) + geom_smooth() + ggtitle("Length of S vs. Width of Interval")
gridExtra::grid.arrange(p23,p33)
samp_split_av <- res %>% filter(type=="split", depth==2) %>% summarize(mean(log10(upper-lower))) %>% as.numeric()
p23 <- ggplot(data = condition %>% filter(depth==2), aes(x = S_int, y=-log10(pvalue), col="conditioning")) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = condition %>% filter(depth==2), aes(x = S_int, y=log10(upper-lower), col="conditioning")) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S") + geom_hline(yintercept = samp_split_av, aes(col="sample splitting (average)"))
gridExtra::grid.arrange(p23,p33)
p23 <- ggplot(data = condition %>% filter(depth==3), aes(x = S_int, y=-log10(pvalue))) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = condition %>% filter(depth==3), aes(x = S_int, y=log10(upper-lower))) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+ xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
p23 <- ggplot(data = res %>% filter(depth==2, type!="naive"), aes(x = S_int, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = res %>% filter(depth==2,type!="naive"), aes(x = S_int, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
log(0)
source('~/Regression Tree Inference Things/depth vs. p-val.R')
res %>% filter(type=="split", S_int > 20)
res %>% filter(type=="split", S_int > 20) %>% select(pvalue)
res %>% filter(type=="split", S_int > 20) %>% select(pvalue) %>% as.numeric()
as.numeric(res %>% filter(type=="split", S_int > 20) %>% select(pvalue))
(res %>% filter(type=="split", S_int > 20) %>% select(pvalue))$pvalue
log10(res %>% filter(type=="split", S_int > 20) %>% select(pvalue))$pvalue
-log10(res %>% filter(type=="split", S_int > 20) %>% select(pvalue))$pvalue
res %>% group_by(type) %>% summarize()min(pvalue)
res %>% group_by(type) %>% summarize(min(pvalue))
res %>% mutate(pvalue = ifelse(pvalue==0, 1e16, pvalue))
res <- res %>% mutate(pvalue = ifelse(pvalue==0, 1e16, pvalue))
library(tidyverse)
condition <- res %>% filter(type == "condition")
res <- res %>% filter(size1 > 0, size2 > 0, !is.na(lower)) %>% mutate(correct = ((lower < truth & upper > truth) | lower < -truth & upper > -truth))
res %>% filter(size1 > 1, size2 > 1, upper != Inf) %>% group_by(depth, type) %>% summarize(mean(correct), mean(upper-lower))
p23 <- ggplot(data = condition %>% filter(depth==2), aes(x = length, y=-log10(pvalue))) + geom_smooth() + ggtitle("Length of S vs. Pvalue")
p33 <- ggplot(data = condition %>% filter(depth==2), aes(x = length, y=log10(upper-lower))) + geom_smooth() + ggtitle("Length of S vs. Width of Interval")
gridExtra::grid.arrange(p23,p33)
p23 <- ggplot(data = res %>% filter(depth==2, type!="naive"), aes(x = S_int, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = res %>% filter(depth==2,type!="naive"), aes(x = S_int, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
log(1e16)
exp(-20)
exp(20)
res[res$type=="condition",]$pvalue
summary(res[res$type=="condition",]$pvalue)
summary(res[res$type=="split",]$pvalue)
setwd("~/Regression Tree Inference Things")
res <- read.csv("these_results_NEW_CORRECT.csv", sep=" ", header=FALSE)
names(res) <- c("seed", "depth", "type", "lower", "upper", "pvalue", "truth",
"size1", "size2", "sample_mean", "num_ints", "length", "length_comp", "S_int", "NA")
head(res)
res <- res %>% mutate(pvalue = ifelse(pvalue==0, (1e-16), pvalue))
library(tidyverse)
condition <- res %>% filter(type == "condition")
res <- res %>% filter(size1 > 0, size2 > 0, !is.na(lower)) %>% mutate(correct = ((lower < truth & upper > truth) | lower < -truth & upper > -truth))
res %>% filter(size1 > 1, size2 > 1, upper != Inf) %>% group_by(depth, type) %>% summarize(mean(correct), mean(upper-lower))
p23 <- ggplot(data = condition %>% filter(depth==2), aes(x = length, y=-log10(pvalue))) + geom_smooth() + ggtitle("Length of S vs. Pvalue")
p33 <- ggplot(data = condition %>% filter(depth==2), aes(x = length, y=log10(upper-lower))) + geom_smooth() + ggtitle("Length of S vs. Width of Interval")
gridExtra::grid.arrange(p23,p33)
p23 <- ggplot(data = res %>% filter(depth==2, type!="naive"), aes(x = S_int, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = res %>% filter(depth==2,type!="naive"), aes(x = S_int, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
res %>% filter(type=="split", S_int < 10)
res %>% filter(type=="split", S_int < 10) %>% summarize(mean(size1))
res %>% filter(type=="split", S_int < 10) %>% summarize(mean(size2))
res %>% filter(type=="split") %>% group_by(S_int < 10) %>% summarize(across, mean)
res %>% filter(type=="split") %>% group_by(S_int < 10) %>% summarize(across, mean))
res %>% filter(type=="split") %>% group_by(S_int < 10) %>% summarize(mean(size1+size1)))
res %>% filter(type=="split") %>% group_by(S_int < 10) %>% summarize(mean(size1)))
res %>% filter(type=="split") %>% group_by(S_int < 10) %>% summarize(mean(size1))
res %>% filter(type=="split") %>% group_by(S_int < 10) %>% summarize(mean(size2))
res %>% filter(type=="split") %>% group_by(S_int < 10) %>% summarize(mean(truth))
##### DEPTH 2: LENGTH or SINT
p23 <- ggplot(data = res %>% filter(depth==2, type!="naive"), aes(x = S_int, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = res %>% filter(depth==2,type!="naive"), aes(x = S_int, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
p23 <- ggplot(data = res %>% filter(depth==2, type!="naive"), aes(x = length, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = res %>% filter(depth==2,type!="naive"), aes(x = length, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
p23 <- ggplot(data = res %>% filter(depth==2, type!="naive"), aes(x = length, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("Length of S")
p33 <- ggplot(data = res %>% filter(depth==2,type!="naive"), aes(x = length, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("Length of S")
gridExtra::grid.arrange(p23,p33)
##### DEPTH 2: LENGTH or SINT
p23 <- ggplot(data = res %>% filter(depth==2, type!="naive"), aes(x = S_int, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = res %>% filter(depth==2,type!="naive"), aes(x = S_int, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
res %>% group_by(type) %>% mean(Sint)
res %>% group_by(type) %>% mean(S_int)
res %>% group_by(type) %>% summarize(mean(S_int))
res %>% group_by(type) %>% summarize(min(S_int))
##### DEPTH 3: LENGTH or SINT
p23 <- ggplot(data = res %>% filter(depth==3, type!="naive"), aes(x = S_int, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = res %>% filter(depth==3,type!="naive"), aes(x = S_int, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
p23 <- ggplot(data = res %>% filter(depth==3, type!="naive"), aes(x = length, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("Length of S")
p33 <- ggplot(data = res %>% filter(depth==3,type!="naive"), aes(x = length, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("Length of S")
gridExtra::grid.arrange(p23,p33)
##### DEPTH 3: LENGTH or SINT
p23 <- ggplot(data = res %>% filter(depth==3, type!="naive"), aes(x = S_int, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = res %>% filter(depth==3,type!="naive"), aes(x = S_int, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
p23 <- ggplot(data = res %>% filter(depth==3, type!="naive"), aes(x = length, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("Length of S")
p33 <- ggplot(data = res %>% filter(depth==3,type!="naive"), aes(x = length, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("Length of S")
gridExtra::grid.arrange(p23,p33)
##### DEPTH 1: LENGTH or SINT
p23 <- ggplot(data = res %>% filter(depth==1, type!="naive"), aes(x = S_int, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = res %>% filter(depth==1,type!="naive"), aes(x = S_int, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
##### DEPTH 2: LENGTH or SINT
p23 <- ggplot(data = res %>% filter(depth==2, type!="naive"), aes(x = S_int, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = res %>% filter(depth==2,type!="naive"), aes(x = S_int, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
setwd("~/Regression Tree Inference Things")
res <- read.csv("these_results_NEW_CORRECT.csv", sep=" ", header=FALSE)
names(res) <- c("seed", "depth", "type", "lower", "upper", "pvalue", "truth",
"size1", "size2", "sample_mean", "num_ints", "length", "length_comp", "S_int", "NA")
head(res)
res <- res %>% mutate(pvalue = ifelse(pvalue==0, (1e-16), pvalue))
library(tidyverse)
condition <- res %>% filter(type == "condition")
res <- res %>% filter(size1 > 0, size2 > 0, !is.na(lower)) %>% mutate(correct = ((lower < truth & upper > truth) | lower < -truth & upper > -truth))
res %>% filter(size1 > 1, size2 > 1, upper != Inf) %>% group_by(depth, type) %>% summarize(mean(correct), mean(upper-lower))
p23 <- ggplot(data = condition %>% filter(depth==2), aes(x = length, y=-log10(pvalue))) + geom_smooth() + ggtitle("Length of S vs. Pvalue")
p33 <- ggplot(data = condition %>% filter(depth==2), aes(x = length, y=log10(upper-lower))) + geom_smooth() + ggtitle("Length of S vs. Width of Interval")
gridExtra::grid.arrange(p23,p33)
##### DEPTH 2: LENGTH or SINT
p23 <- ggplot(data = res %>% filter(depth==2, type!="naive"), aes(x = S_int, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = res %>% filter(depth==2,type!="naive"), aes(x = S_int, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
p23 <- ggplot(data = res %>% filter(depth==2, type!="naive"), aes(x = length, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("Length of S")
p33 <- ggplot(data = res %>% filter(depth==2,type!="naive"), aes(x = length, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("Length of S")
gridExtra::grid.arrange(p23,p33)
##### DEPTH 2: LENGTH or SINT
p23 <- ggplot(data = res %>% filter(depth==2, type!="naive"), aes(x = S_int, y=-log10(pvalue), col=type, group=type)) + geom_point() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = res %>% filter(depth==2,type!="naive"), aes(x = S_int, y=log10(upper-lower), col=type, group  = type)) + geom_point() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
exp(-20)
##### DEPTH 2: LENGTH or SINT
p23 <- ggplot(data = res %>% filter(depth==2, type!="naive"), aes(x = S_int, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = res %>% filter(depth==2,type!="naive"), aes(x = S_int, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
which(res$S_int<2)
which(res[res$int < 2,]$S_int<2)
which(res[res$depth == 2,]$S_int<2)
res[1584,]
res[res$depth==2,][1584,]
head(res)
which(res$NA != NA)
which(!is.na(res$NA))
!is.na(res$NA)
is.na(res$NA)
res$NA
res$NA
res[,15]
setwd("~/Regression Tree Inference Things")
res <- read.csv("these_results_NEW_CORRECT.csv", sep=" ", header=FALSE)
names(res) <- c("seed", "depth", "type", "lower", "upper", "pvalue", "truth",
"size1", "size2", "sample_mean", "num_ints", "length", "length_comp", "S_int", "S_int2")
head(res)
res <- res %>% mutate(pvalue = ifelse(pvalue==0, (1e-16), pvalue),
S_int2 = ifelse(is.na(S_int2, 0, S_int2)),
S_int = S_int + S_int2)
library(tidyverse)
condition <- res %>% filter(type == "condition")
res <- res %>% filter(size1 > 0, size2 > 0, !is.na(lower)) %>% mutate(correct = ((lower < truth & upper > truth) | lower < -truth & upper > -truth))
res %>% filter(size1 > 1, size2 > 1, upper != Inf) %>% group_by(depth, type) %>% summarize(mean(correct), mean(upper-lower))
p23 <- ggplot(data = condition %>% filter(depth==2), aes(x = length, y=-log10(pvalue))) + geom_smooth() + ggtitle("Length of S vs. Pvalue")
p33 <- ggplot(data = condition %>% filter(depth==2), aes(x = length, y=log10(upper-lower))) + geom_smooth() + ggtitle("Length of S vs. Width of Interval")
gridExtra::grid.arrange(p23,p33)
##### DEPTH 2: LENGTH or SINT
p23 <- ggplot(data = res %>% filter(depth==2, type!="naive"), aes(x = S_int, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = res %>% filter(depth==2,type!="naive"), aes(x = S_int, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
p23 <- ggplot(data = res %>% filter(depth==2, type!="naive"), aes(x = length, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("Length of S")
p33 <- ggplot(data = res %>% filter(depth==2,type!="naive"), aes(x = length, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("Length of S")
gridExtra::grid.arrange(p23,p33)
##### DEPTH 3: LENGTH or SINT
p23 <- ggplot(data = res %>% filter(depth==3, type!="naive"), aes(x = S_int, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = res %>% filter(depth==3,type!="naive"), aes(x = S_int, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
p23 <- ggplot(data = res %>% filter(depth==3, type!="naive"), aes(x = length, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("Length of S")
p33 <- ggplot(data = res %>% filter(depth==3,type!="naive"), aes(x = length, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("Length of S")
gridExtra::grid.arrange(p23,p33)
##### DEPTH 2: LENGTH or SINT
p23 <- ggplot(data = res %>% filter(depth==2, type!="naive"), aes(x = S_int, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = res %>% filter(depth==2,type!="naive"), aes(x = S_int, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
min(res$S_int2)
res$S_int2
res <- res %>% mutate(pvalue = ifelse(pvalue==0, (1e-16), pvalue),
S_int2 = ifelse(is.na(S_int2, 0, S_int2)),
S_int = S_int + S_int2)
setwd("~/Regression Tree Inference Things")
res <- read.csv("these_results_NEW_CORRECT.csv", sep=" ", header=FALSE)
names(res) <- c("seed", "depth", "type", "lower", "upper", "pvalue", "truth",
"size1", "size2", "sample_mean", "num_ints", "length", "length_comp", "S_int", "S_int2")
head(res)
res <- res %>% mutate(pvalue = ifelse(pvalue==0, (1e-16), pvalue),
S_int2 = ifelse(is.na(S_int2), 0, S_int2),
S_int = S_int + S_int2)
library(tidyverse)
condition <- res %>% filter(type == "condition")
res <- res %>% filter(size1 > 0, size2 > 0, !is.na(lower)) %>% mutate(correct = ((lower < truth & upper > truth) | lower < -truth & upper > -truth))
res %>% filter(size1 > 1, size2 > 1, upper != Inf) %>% group_by(depth, type) %>% summarize(mean(correct), mean(upper-lower))
p23 <- ggplot(data = condition %>% filter(depth==2), aes(x = length, y=-log10(pvalue))) + geom_smooth() + ggtitle("Length of S vs. Pvalue")
p33 <- ggplot(data = condition %>% filter(depth==2), aes(x = length, y=log10(upper-lower))) + geom_smooth() + ggtitle("Length of S vs. Width of Interval")
gridExtra::grid.arrange(p23,p33)
##### DEPTH 2: LENGTH or SINT
p23 <- ggplot(data = res %>% filter(depth==2, type!="naive"), aes(x = S_int, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = res %>% filter(depth==2,type!="naive"), aes(x = S_int, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
p23 <- ggplot(data = res %>% filter(depth==2, type!="naive"), aes(x = length, y=-log10(pvalue), col=type, group=type)) + geom_smooth() + ggtitle("-log10(PValue)") + xlab("Length of S")
p33 <- ggplot(data = res %>% filter(depth==2,type!="naive"), aes(x = length, y=log10(upper-lower), col=type, group  = type)) + geom_smooth() + ggtitle("log10(Width of Conf. Int)")+
xlab("Length of S")
gridExtra::grid.arrange(p23,p33)
##### DEPTH 2: LENGTH or SINT
p23 <- ggplot(data = res %>% filter(depth==2, type!="naive"), aes(x = S_int, y=-log10(pvalue), col=type, group=type)) + geom_point() + ggtitle("-log10(PValue)") + xlab("How much of [-stat, stat] is missing from S")
p33 <- ggplot(data = res %>% filter(depth==2,type!="naive"), aes(x = S_int, y=log10(upper-lower), col=type, group  = type)) + geom_point() + ggtitle("log10(Width of Conf. Int)")+
xlab("How much of [-stat, stat] is missing from S")
gridExtra::grid.arrange(p23,p33)
res <- read.csv("cluster_RES.csv", sep=" ", header=FALSE)
names(res) <- c("scenario",  "mean0beta",  "mean005beta", "mean01beta",
"mean05beta", "mean1beta", "median0beta", "median005beta","median01beta",
"median05beta", "median1beta",
"mean0atom","mean005atom",
"mean01atom","mean05atom","mean1atom","median0atom",
"median005atom",
"median01atom","median05atom","median1atom")
res <- res %>% mutate(scenario = scenario%%5+1)
res$iteration <- 1:NROW(res)
trial <- melt(res, id=c('iteration', 'scenario'))
library(tidyverse)
library(reshape2)
res <- read.csv("cluster_RES.csv", sep=" ", header=FALSE)
setwd("~/Stat572")
library(tidyverse)
library(reshape2)
setwd("~/Stat572")
res <- read.csv("cluster_RES.csv", sep=" ", header=FALSE)
names(res) <- c("scenario",  "mean0beta",  "mean005beta", "mean01beta",
"mean05beta", "mean1beta", "median0beta", "median005beta","median01beta",
"median05beta", "median1beta",
"mean0atom","mean005atom",
"mean01atom","mean05atom","mean1atom","median0atom",
"median005atom",
"median01atom","median05atom","median1atom")
res <- res %>% mutate(scenario = scenario%%5+1)
res$iteration <- 1:NROW(res)
trial <- reshape2::melt(res, id=c('iteration', 'scenario'))
head(trial)
head(res)
library(dplyr, warn.conflicts = FALSE)
?across
res %>% group_by(scenario) %>% summarize(across, mean)
res %>% group_by(scenario) %>% summarize(across(is.numeric), mean)
res %>% group_by(scenario) %>% summarize(across(is.numeric, mean))
head(res)
names(res)[12]
names(res)[17]
res2 <- (res %>% group_by(scenario) %>% summarize(across(is.numeric, mean)))[,c(1:6, 12:16)]
head(res)
head(res2)
res2[1:2, 2:6] <- res2[1:2, 7:12]
dim(res)
dim(res2)
res2[1:2, 2:6] <- res2[1:2, 7:11]
head(res2)
res2 <- res2[,1:6]
head(res2)
names(res2) <- c("0", "0.005", "0.01", "0.05", "0.1")
names(res2) <- c("scenario", "0", "0.005", "0.01", "0.05", "0.1")
head(res2)
reshape2::melt(res2, id=c('scenario'))
trial <- reshape2::melt(res, id=c('scenario'))
head(trial)
trial <- reshape2::melt(res2, id=c('scenario'))
head(trial)
trial
res2 <- (res %>% group_by(scenario) %>% summarize(across(is.numeric, function(u) mean((u-500)^2))))[,c(1:6, 12:16)]
head(res2)
res2[1:2, 2:6] <- res2[1:2, 7:11]
res2 <- res2[,1:6]
names(res2) <- c("scenario", "0", "0.005", "0.01", "0.05", "0.1")
trial <- reshape2::melt(res2, id=c('scenario'))
head(trial)
trial
ggplot(data=trial, aes(x=variable, y=sqrt(value), group = scenario)) + geom_line()
ggplot(data=trial, aes(x=variable, y=sqrt(value), group = scenario)) + geom_point()
ggplot(data=trial, aes(x=variable, y=sqrt(value), group = scenario)) + geom_point() + scale_y_continuous(trans="log10")
ggplot(data=trial, aes(x=variable, y=sqrt(value), group = scenario, col=scenario)) + geom_line() + scale_y_continuous(trans="log10")
ggplot(data=trial, aes(x=variable, y=sqrt(value), group = scenario, col=as.factor(scenario))) + geom_line() + scale_y_continuous(trans="log10")
ggplot(data=trial, aes(x=variable, y=sqrt(value), group = scenario, col=as.factor(scenario))) + geom_point() + geom_line() + scale_y_continuous(trans="log10")
ggplot(data=trial, aes(x=variable, y=sqrt(value), group = scenario, col=as.factor(scenario))) +
geom_point() + geom_line() + scale_y_continuous(trans="log10")+
labs(col="Scenario")
names <- c("Atom1", "Atom2", "Beta(1/2, 1/2)", "Beta(1,10)", "Beta(1,1)")
trial <- reshape2::melt(res2, id=c('scenario')) %>% mutate(scenarioName = names[scenario])
ggplot(data=trial %>% filter(scenario > 2), aes(x=variable, y=sqrt(value), group = scenario, col=as.factor(scenarioName))) +
geom_point() + geom_line() + scale_y_continuous(trans="log10")+
labs(col="Scenario")
ggplot(data=trial %>% filter(scenario > 2), aes(x=variable, y=sqrt(value), group = scenario, col=as.factor(scenarioName))) +
geom_point() + geom_line() + scale_y_continuous(trans="log10")+
labs(col="Scenario") + xlab(expression[alpha]) + ylab(expression[sqrt[MSE]])
ggplot(data=trial %>% filter(scenario > 2), aes(x=variable, y=sqrt(value), group = scenario, col=as.factor(scenarioName))) +
geom_point() + geom_line() + scale_y_continuous(trans="log10")+
labs(col="Scenario") + xlab(expression[alpha]) + ylab(expression[sqrt[MSE]])
ggplot(data=trial %>% filter(scenario > 2), aes(x=variable, y=sqrt(value), group = scenario, col=as.factor(scenarioName))) +
geom_point() + geom_line() + scale_y_continuous(trans="log10")+
labs(col="Scenario") + xlab(expression(alpha)) + ylab(expression(sqrt[MSE]))
ggplot(data=trial %>% filter(scenario > 2), aes(x=variable, y=sqrt(value), group = scenario, col=as.factor(scenarioName))) +
geom_point() + geom_line() + scale_y_continuous(trans="log10")+
labs(col="Scenario") + xlab(expression(alpha)) + ylab(expression(sqrt(MSE)))
ggplot(data=trial %>% filter(scenario > 2), aes(x=variable, y=sqrt(value), group = scenario, col=as.factor(scenarioName))) +
geom_point() + geom_line() + scale_y_continuous(trans="log10")+
labs(col="Scenario") + xlab(expression(alpha)) + ylab(expression(sqrt(MSE)))
ggplot(data=trial %>% filter(scenario > 2), aes(x=variable, y=sqrt(value), group = scenario, col=as.factor(scenarioName))) +
geom_point() + geom_line() + scale_y_continuous(trans="log10")+
labs(col="Scenario") + xlab(expression(alpha)) + ylab(expression(sqrt(MSE)))+
ggtitle("Average Root-MSE of Posterior Means")
names <- c("Atom 0.1,0.2,0.5", "Atom 0.01,0.1,0.6", "Beta(1/2, 1/2)", "Beta(1,10)", "Beta(1,1)")
trial <- reshape2::melt(res2, id=c('scenario')) %>% mutate(scenarioName = names[scenario])
ggplot(data=trial %>% filter(scenario > 2), aes(x=variable, y=sqrt(value), group = scenario, col=as.factor(scenarioName))) +
geom_point() + geom_line() + scale_y_continuous(trans="log10")+
labs(col="Scenario") + xlab(expression(alpha)) + ylab(expression(sqrt(MSE)))+
ggtitle("Average Root-MSE of Posterior Means")
ggplot(data=trial, aes(x=variable, y=sqrt(value), group = scenario, col=as.factor(scenarioName))) +
geom_point() + geom_line() + scale_y_continuous(trans="log10")+
labs(col="Scenario") + xlab(expression(alpha)) + ylab(expression(sqrt(MSE)))+
ggtitle("Average Root-MSE of Posterior Means")
